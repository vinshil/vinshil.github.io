<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Go操作Mysql</title>
    <url>/2021/02/02/Go%E6%93%8D%E4%BD%9CMySQL/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>MySQL是业界常用的关系型数据库，记录Go如何操作MySQL数据库</p>
<h2 id="连接MySQL"><a href="#连接MySQL" class="headerlink" title="连接MySQL"></a>连接MySQL</h2><p>Go语言中的 <code>database/sql</code> 包提供了 <code>SQL</code> 或类 <code>SQL</code> 数据库的泛用接口，并需要（至少一个）数据库驱动，一般使用第三方<a href="https://github.com/go-sql-driver/mysql">MySQL驱动</a></p>
<h3 id="下载驱动"><a href="#下载驱动" class="headerlink" title="下载驱动"></a>下载驱动</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> get -u github.com/<span class="keyword">go</span>-sql-driver/mysql</span><br></pre></td></tr></table></figure>
<h3 id="使用驱动"><a href="#使用驱动" class="headerlink" title="使用驱动"></a>使用驱动</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Open</span><span class="params">(driverName, dataSourceName <span class="keyword">string</span>)</span> <span class="params">(*DB, error)</span></span></span><br></pre></td></tr></table></figure>
<p><code>Open</code> 函数打开一个 <code>driverName</code> 指定的数据库，<code>dataSourceName</code> 指定数据源，模式是：</p>
<p><code>(数据库)账号:密码@连接方式(ip地址:端口号)/数据库名</code> </p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;database/sql&quot;</span></span><br><span class="line">	_ <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	db, err := sql.Open(<span class="string">&quot;mysql&quot;</span>, <span class="string">&quot;user:password@tcp(127.0.0.1:3306)/dbname&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> db.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="初始化连接"><a href="#初始化连接" class="headerlink" title="初始化连接"></a>初始化连接</h3><p><code>Open</code> 函数只检查输入的数据源格式是否正确，无法确认输入的数据源是否存在（类似注册账号时填写的邮件，它只判断你填写的是否是：<code>xx@qq.com</code> 这类的格式，不知道你输入的账号是否存在），所以我们用 <code>Ping</code> 方法来确认：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;database/sql&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line">	_ <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// 全局db</span></span><br><span class="line"><span class="keyword">var</span> db *sql.DB</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitDB</span><span class="params">()</span> <span class="params">(err error)</span></span> &#123;</span><br><span class="line">	db, err = sql.Open(<span class="string">&quot;mysql&quot;</span>, <span class="string">&quot;user:password@tcp(127.0.0.1:3306)/dbname&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> db.Close()</span><br><span class="line">    <span class="comment">// 尝试与数据库建立连接(校验数据源是否存在)</span></span><br><span class="line">	err = db.Ping()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123; </span><br><span class="line">		<span class="keyword">return</span> err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	err := InitDB()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Println(<span class="string">&quot;init db failed, err:&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="连接配置"><a href="#连接配置" class="headerlink" title="连接配置"></a>连接配置</h3><h4 id="最大连接数"><a href="#最大连接数" class="headerlink" title="最大连接数"></a>最大连接数</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *DB)</span> <span class="title">SetMaxOpenConns</span><span class="params">(n <span class="keyword">int</span>)</span></span></span><br></pre></td></tr></table></figure>
<p><code>SetMaxOpenConns</code> 设置与数据库建立连接的最大数目。如果n&gt;0且小于最大闲置连接数，会将最大闲置连接数减小到匹配最大开启连接数的限制。如果n&lt;=0，不会限制最大开启连接数，默认为0 (无限制)</p>
<h4 id="最大闲置数"><a href="#最大闲置数" class="headerlink" title="最大闲置数"></a>最大闲置数</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(db *DB)</span> <span class="title">SetMaxIdleConns</span><span class="params">(n <span class="keyword">int</span>)</span></span></span><br></pre></td></tr></table></figure>
<p><code>SetMaxIdleConns</code> 设置连接池中最大闲置连接数。如果n大于最大连接数，则新的最大闲置连接数会减小到匹配最大开启连接数的闲置。如果n&lt;=0，不会保留闲置连接。</p>
<h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><p>感谢以下文章的帮助：</p>
<blockquote>
<p><a href="https://www.liwenzhou.com/posts/Go/go_mysql/">Go语言操作MySQL</a></p>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Go操作Redis</title>
    <url>/2021/02/03/Go%E6%93%8D%E4%BD%9CRedis/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本文记录Go中redis的使用</p>
<h2 id="Redis介绍"><a href="#Redis介绍" class="headerlink" title="Redis介绍"></a>Redis介绍</h2><p>Redis是一个开源的内存数据库，Redis提供了多种不同类型的数据结构，很多业务场景下的问题都可以很自然地映射到这些数据结构上。除此之外，通过复制、持久化和客户端分片等特性，我们可以很方便地将Redis扩展成一个能够包含数百GB数据、每秒处理上百万次请求的系统。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h2 id="感谢："><a href="#感谢：" class="headerlink" title="感谢："></a>感谢：</h2><p>感谢以下这些文章的帮助：</p>
<blockquote>
<p><a href="https://www.liwenzhou.com/posts/Go/go_redis/">Go语言操作Redis</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Go文件操作</title>
    <url>/2021/01/27/Go%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>记录Go文件操作</p>
<h2 id="打开、关闭文件"><a href="#打开、关闭文件" class="headerlink" title="打开、关闭文件"></a>打开、关闭文件</h2><p><code>os.Open()</code> 函数可以打开一个文件，返回 <code>*File</code> 和 <code>err</code> 。对得到的文件实例调用 <code>close()</code> 方法关闭文件</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 只读方式打开一个文件</span></span><br><span class="line">    file, err := os.Open(<span class="string">&quot;./main.go&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;open &#x27;./main.go&#x27; file failed!, err:&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 关闭文件</span></span><br><span class="line">    file.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h2><h3 id="file-Read"><a href="#file-Read" class="headerlink" title="file.Read()"></a>file.Read()</h3><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p>Read方法定义：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *file)</span> <span class="title">Read</span><span class="params">(b []<span class="keyword">byte</span>)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span></span><br></pre></td></tr></table></figure>
<p>它接受一个切片字节，返回读取到的字节数和可能的错误，读到文件末尾时会返回 <code>0</code> 和 <code>io.EOF</code> 。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 只读方式打开一个文件</span></span><br><span class="line">	file, err := os.Open(<span class="string">&quot;./main.go&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;open &#x27;./main.go&#x27; file failed!, err:&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 关闭文件</span></span><br><span class="line">	<span class="keyword">defer</span> file.Close()</span><br><span class="line">	<span class="comment">// 使用Read方法读取数据</span></span><br><span class="line">	<span class="keyword">var</span> tmp = <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">128</span>)</span><br><span class="line">    <span class="comment">// 读取file实例的数据放在tmp变量中，返回读取的字节数量n和可能出现的err</span></span><br><span class="line">	n, err := file.Read(tmp)</span><br><span class="line">	<span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;文件读完了&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;read file failed, err:&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="keyword">string</span>(tmp[:n]))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="循环读取"><a href="#循环读取" class="headerlink" title="循环读取"></a>循环读取</h4><p>使用for循环读取文件中的所有数据：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 只读方式打开一个文件，返回一个file实例和可能出现的err</span></span><br><span class="line">	file, err := os.Open(<span class="string">&quot;./main.go&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;open &#x27;./main.go&#x27; file failed!, err:&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 关闭文件</span></span><br><span class="line">	<span class="keyword">defer</span> file.Close()</span><br><span class="line">	<span class="comment">// 使用Read方法读取数据</span></span><br><span class="line">	<span class="keyword">var</span> tmp = <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">128</span>)</span><br><span class="line">	<span class="keyword">var</span> cont []<span class="keyword">byte</span></span><br><span class="line">	<span class="keyword">for</span> &#123; </span><br><span class="line">		n, err := file.Read(tmp)</span><br><span class="line">		<span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">          	fmt.Println(<span class="string">&quot;文件读完了&quot;</span>)</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;read file failed, err:&quot;</span>, err)</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		cont = <span class="built_in">append</span>(cont, tmp[:n]...)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="keyword">string</span>(cont))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="bufio读取文件"><a href="#bufio读取文件" class="headerlink" title="bufio读取文件"></a>bufio读取文件</h3><p>bufio在file的基础上封装了一层API，支持更多功能：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 只读方式打开一个文件</span></span><br><span class="line">	file, err := os.Open(<span class="string">&quot;./main.go&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;open &#x27;./main.go&#x27; file failed!, err:&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 关闭文件</span></span><br><span class="line">	<span class="keyword">defer</span> file.Close()</span><br><span class="line">	reader := bufio.NewReader(file)</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="comment">// 读取到ReadString参数后停止，例：&#x27;\n&#x27;，读取到换行停止，也就是按行读取</span></span><br><span class="line">        <span class="comment">// 返回读取到的数据line和可能出现的err</span></span><br><span class="line">		line, err := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">		<span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;文件读完了&quot;</span>)</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(<span class="string">&quot;read file failed, err:&quot;</span>, err)</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Print(line)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ioutil读取整个文件"><a href="#ioutil读取整个文件" class="headerlink" title="ioutil读取整个文件"></a>ioutil读取整个文件</h3><p><code>io/ioutil</code> 包的 <code>ReadFile</code> 方法可以读取完整的文件，只需将文件名字作为参数传入：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// ioutil.ReadFile读取整个文件</span></span><br><span class="line">    cont, err := ioutil.ReadFile(<span class="string">&quot;./main.go&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;read file failed, err:&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="keyword">string</span>(cont))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h2><h3 id="打开文件OpenFile"><a href="#打开文件OpenFile" class="headerlink" title="打开文件OpenFile"></a>打开文件<code>OpenFile</code></h3><p>写入文件因为可能有：目标文件不存在、无权限等情况，所以 <code>os.Open</code> 函数不够</p>
<p><code>os.OpenFile()</code> 函数可以以指定模式打开文件，实现文件写入操作：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">OpenFile</span><span class="params">(name <span class="keyword">string</span>, flag <span class="keyword">int</span>, perm FileMode)</span> <span class="params">(*File, err)</span></span>&#123;...&#125;</span><br></pre></td></tr></table></figure>
<p>其中：</p>
<p><code>name</code>：要打开的文件名 <code>flag</code>：打开文件的模式。 模式有以下几种，<code>perm</code>：文件权限，一个八进制数。r（读）04，w（写）02，x（执行）01。</p>
<table>
<thead>
<tr>
<th align="left">模式</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>os.O_WRONLY</code></td>
<td align="left">只写</td>
</tr>
<tr>
<td align="left"><code>os.O_CREATE</code></td>
<td align="left">创建文件</td>
</tr>
<tr>
<td align="left"><code>os.O_RDONLY</code></td>
<td align="left">只读</td>
</tr>
<tr>
<td align="left"><code>os.O_RDWR</code></td>
<td align="left">读写</td>
</tr>
<tr>
<td align="left"><code>os.O_TRUNC</code></td>
<td align="left">清空</td>
</tr>
<tr>
<td align="left"><code>os.O_APPEND</code></td>
<td align="left">追加</td>
</tr>
</tbody></table>
<h3 id="write-写入文件"><a href="#write-写入文件" class="headerlink" title="write 写入文件"></a><code>write</code> 写入文件</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 打开xx.txt文件，模式：文件不存在则创建|只写入|写入时清空目标文件，文件权限为0666</span></span><br><span class="line">	file, err := os.OpenFile(<span class="string">&quot;./xx.txt&quot;</span>, os.O_CREATE|os.O_WRONLY|os.O_TRUNC, <span class="number">0666</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;open file failed, err:&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> file.Close()</span><br><span class="line">	str := <span class="string">&quot;hello world&quot;</span></span><br><span class="line">	<span class="comment">// 写入[]byte数据</span></span><br><span class="line">	file.Write([]<span class="keyword">byte</span>(str))</span><br><span class="line">	<span class="comment">// 直接写入字符串</span></span><br><span class="line">	file.WriteString(str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="bufio-NewWriter-写入文件"><a href="#bufio-NewWriter-写入文件" class="headerlink" title="bufio.NewWriter  写入文件"></a><code>bufio.NewWriter</code>  写入文件</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	file, err := os.OpenFile(<span class="string">&quot;./xx.txt&quot;</span>, os.O_CREATE|os.O_WRONLY|os.O_TRUNC, <span class="number">0666</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;open file failed, err:&quot;</span>, err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> file.Close()</span><br><span class="line">	writer := bufio.NewWriter(file)</span><br><span class="line">	str := <span class="string">&quot;hello world&quot;</span></span><br><span class="line">	<span class="comment">// 将数据写入缓存中</span></span><br><span class="line">	writer.WriteString(str)</span><br><span class="line">	<span class="comment">// 将缓存中的内容写入文件</span></span><br><span class="line">	writer.Flush()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ioutil-WriteFile-写入文件"><a href="#ioutil-WriteFile-写入文件" class="headerlink" title="ioutil.WriteFile 写入文件"></a><code>ioutil.WriteFile</code> 写入文件</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    str := <span class="string">&quot;hello world&quot;</span></span><br><span class="line">    <span class="comment">// ioutil.WriteFile默认使用：文件不存在则创建|只写入|写入时清空目标文件，模式来写入文件</span></span><br><span class="line">    err := ioutil.WriteFile(<span class="string">&quot;./xx.txt&quot;</span>, []<span class="keyword">byte</span>(str), <span class="number">0666</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;write file failed, err:&quot;</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="文件分割与合并"><a href="#文件分割与合并" class="headerlink" title="文件分割与合并"></a>文件分割与合并</h2><h3 id="大文件分割"><a href="#大文件分割" class="headerlink" title="大文件分割"></a>大文件分割</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// chunkSize:文件分割成多大</span></span><br><span class="line"><span class="keyword">const</span> chunkSize = <span class="number">1</span> &lt;&lt; (<span class="number">10</span> * <span class="number">2</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 参数是文件，返回的是文件信息:name,size...(名字，大小等等...)</span></span><br><span class="line">	fileInfo, err := os.Stat(<span class="string">&quot;xx.log&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// num：分割文件个数，math.Ceil：向上取整</span></span><br><span class="line">	num := math.Ceil(<span class="keyword">float64</span>(fileInfo.Size()) / chunkSize)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 以只读模式打开文件，ModePerm：文件权限0777</span></span><br><span class="line">	fi, err := os.OpenFile(<span class="string">&quot;xx.log&quot;</span>, os.O_RDONLY, os.ModePerm)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> fi.Close()</span><br><span class="line">	b := <span class="built_in">make</span>([]<span class="keyword">byte</span>, chunkSize)</span><br><span class="line">	<span class="keyword">var</span> i <span class="keyword">int64</span> = <span class="number">1</span></span><br><span class="line">	<span class="keyword">for</span> ; i &lt;= <span class="keyword">int64</span>(num); i++ &#123;</span><br><span class="line">		<span class="comment">// 读取chunkSize大小的fi的数据放入b</span></span><br><span class="line">		fi.Seek((i<span class="number">-1</span>)*chunkSize, <span class="number">0</span>)</span><br><span class="line">        <span class="comment">// 当b的长度大于剩余数据长度时，b长度为剩余数据长度</span></span><br><span class="line">		<span class="keyword">if</span> <span class="built_in">len</span>(b) &gt; <span class="keyword">int</span>(fileInfo.Size()-(i<span class="number">-1</span>)*chunkSize) &#123;</span><br><span class="line">			b = <span class="built_in">make</span>([]<span class="keyword">byte</span>, fileInfo.Size()-(i<span class="number">-1</span>)*chunkSize)</span><br><span class="line">		&#125;</span><br><span class="line">		fi.Read(b)</span><br><span class="line">        <span class="comment">// 把b中的数据写入f，文件名字以: i.log为名</span></span><br><span class="line">		f, err := os.OpenFile(<span class="string">&quot;./&quot;</span>+strconv.Itoa(<span class="keyword">int</span>(i))+<span class="string">&quot;.log&quot;</span>, os.O_CREATE|os.O_WRONLY, os.ModePerm)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="built_in">panic</span>(err)</span><br><span class="line">		&#125;</span><br><span class="line">        <span class="keyword">defer</span> f.Close()</span><br><span class="line">		f.Write(b)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="文件合并"><a href="#文件合并" class="headerlink" title="文件合并"></a>文件合并</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fii, err := os.OpenFile(<span class="string">&quot;xx.log&quot;</span>, os.O_CREATE|os.O_WRONLY|os.O_APPEND, os.ModePerm)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">defer</span> fii.Close()</span><br><span class="line">    <span class="comment">// num：合并文件个数</span></span><br><span class="line">    num := <span class="number">1</span></span><br><span class="line">    <span class="comment">// i.log的数据写入b中，b中的数据以追加的方式加入xx.log中</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= num; i++ &#123;</span><br><span class="line">		f, err := os.OpenFile(<span class="string">&quot;./&quot;</span>+strconv.Itoa(<span class="keyword">int</span>(i))+<span class="string">&quot;.log&quot;</span>, os.O_RDONLY, os.ModePerm)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(err)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		b, err := ioutil.ReadAll(f)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			fmt.Println(err)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		fii.Write(b)</span><br><span class="line">		f.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><p>感谢以下文章的帮助：</p>
<blockquote>
<p><a href="https://www.liwenzhou.com/posts/Go/go_file/">Go语言文件操作</a></p>
<p><a href="https://studygolang.com/articles/2687">golang 大文件分割</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>文件操作</tag>
      </tags>
  </entry>
  <entry>
    <title>Go日志</title>
    <url>/2021/02/02/Go%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>记录Go日志操作</p>
<h2 id="标准log库"><a href="#标准log库" class="headerlink" title="标准log库"></a>标准log库</h2><h3 id="log输出"><a href="#log输出" class="headerlink" title="log输出"></a>log输出</h3><p>Go有 <code>fmt.Print</code> 输出，但是使用 <code>log.Print</code> 得话输出自带时间，可以更好帮我们找到出现问题得时间：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	log.Println(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="number">2021</span>/<span class="number">02</span>/<span class="number">02</span> <span class="number">11</span>:<span class="number">54</span>:<span class="number">25</span> hello world</span><br></pre></td></tr></table></figure>
<h3 id="定制log输出"><a href="#定制log输出" class="headerlink" title="定制log输出"></a>定制log输出</h3><p>有了时间，但是我们还想要更多得信息，发生得源代码行号等等，对此 <code>log</code> 提供了可定制化配置，可以定制日志的抬头信息</p>
<p>可以定义的选项：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    Ldate         = <span class="number">1</span> &lt;&lt; <span class="literal">iota</span>     <span class="comment">//日期示例： 2009/01/23</span></span><br><span class="line">    Ltime                         <span class="comment">//时间示例: 01:23:23</span></span><br><span class="line">    Lmicroseconds                 <span class="comment">//毫秒示例: 01:23:23.123123.</span></span><br><span class="line">    Llongfile                     <span class="comment">//绝对路径和行号: /a/b/c/d.go:23</span></span><br><span class="line">    Lshortfile                    <span class="comment">//文件和行号: d.go:23.</span></span><br><span class="line">    LUTC                          <span class="comment">//日期时间转为0时区的</span></span><br><span class="line">    LstdFlags     = Ldate | Ltime <span class="comment">//Go提供的标准抬头信息</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>现在定制：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	log.SetFlags(log.Ldate | log.Ltime | log.Llongfile)</span><br><span class="line">	log.Println(<span class="string">&quot;hello world&quot;</span>) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="number">2021</span>/<span class="number">02</span>/<span class="number">02</span> <span class="number">14</span>:<span class="number">20</span>:<span class="number">35</span> .../main.<span class="keyword">go</span>:<span class="number">7</span>: hello world</span><br></pre></td></tr></table></figure>
<h3 id="日志前缀"><a href="#日志前缀" class="headerlink" title="日志前缀"></a>日志前缀</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Prefix 查看前缀</span></span><br><span class="line"><span class="comment">// SetPrefix 设置前缀</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Prefix</span> 查看前缀<span class="params">()</span> <span class="title">string</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SetPrefix</span><span class="params">(prefix <span class="keyword">string</span>)</span></span></span><br></pre></td></tr></table></figure>
<p>最后一个 <code>LstdFlags</code> 是日志前缀，大部分情况项目有很多业务，添加前缀可以区分这些业务：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	log.SetPrefix(<span class="string">&quot;【UserCenter】&quot;</span>)</span><br><span class="line">	log.SetFlags(log.Ldate | log.Ltime | log.Llongfile)</span><br><span class="line">	log.Println(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">【UserCenter】<span class="number">2021</span>/<span class="number">02</span>/<span class="number">02</span> <span class="number">14</span>:<span class="number">20</span>:<span class="number">35</span> .../main.<span class="keyword">go</span>:<span class="number">7</span>: hello world</span><br></pre></td></tr></table></figure>
<h3 id="日志输出位置"><a href="#日志输出位置" class="headerlink" title="日志输出位置"></a>日志输出位置</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SetOutput</span><span class="params">(w io.Writer)</span></span></span><br></pre></td></tr></table></figure>
<p><code>SetOutput</code> 函数用来设置log的输出目的地</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 打开一个文件，返回logFile实例</span></span><br><span class="line">	logFile, err := os.OpenFile(<span class="string">&quot;./xx.log&quot;</span>, os.O_CREATE|os.O_WRONLY|os.O_APPEND, os.ModePerm)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Println(<span class="string">&quot;open file failed, err:&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	log.SetOutput(logFile)</span><br><span class="line">	log.SetPrefix(<span class="string">&quot;【UserCenter】&quot;</span>)</span><br><span class="line">	log.SetFlags(log.Ldate | log.Ltime | log.Llongfile)</span><br><span class="line">	log.Println(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="创建logger"><a href="#创建logger" class="headerlink" title="创建logger"></a>创建logger</h3><p><code>log</code> 标准库中还提供一个 <code>logger</code> 对象的构造函数— <code>New</code> ，支持我们创建自己的 <code>logger</code> 实例。 <code>New</code> 函数签名如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(out io.Writer, prefix <span class="keyword">string</span>, flag <span class="keyword">int</span>)</span> *<span class="title">Logger</span></span></span><br></pre></td></tr></table></figure>
<p>其中，<code>out</code> 设置日志信息写入的目的地。<code>prefix</code> 会添加到生成的每一条日志前面的前缀。<code>flag</code> 定义日志的属性（时间、文件等等）。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 打开一个文件，返回logFile实例</span></span><br><span class="line">	logFile, err := os.OpenFile(<span class="string">&quot;./xx.log&quot;</span>, os.O_CREATE|os.O_WRONLY|os.O_APPEND, os.ModePerm)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Println(<span class="string">&quot;open file failed, err:&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	logger := log.New(logFile, <span class="string">&quot;&quot;</span>, log.Ldate|log.Ltime|log.Llongfile)</span><br><span class="line">	logger.Println(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><p>感谢以下文章得帮助：</p>
<blockquote>
<p><a href="https://www.jianshu.com/p/d634316a9487">Go log 日志</a></p>
<p><a href="https://www.liwenzhou.com/posts/Go/go_log/">Go语言标准库log介绍</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>Go环境搭建</title>
    <url>/2021/01/25/Go%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本文记录自己的Go的环境搭建</p>
<p>安装Go语言</p>
<p>官网地址：<a href="https://golang.org/%EF%BC%88%E5%9B%BD%E5%A4%96%E7%BD%91%E5%9D%80%EF%BC%8C%E8%A2%AB%E5%A2%99%EF%BC%89">https://golang.org/（国外网址，被墙）</a></p>
<p>官方镜像：<a href="https://golang.google.cn/">https://golang.google.cn/</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="windouws-安装"><a href="#windouws-安装" class="headerlink" title="windouws 安装"></a>windouws 安装</h3><p>官网下载<a href="https://golang.google.cn/dl/">windows最新安装包</a></p>
<p><img src="https://i.loli.net/2021/02/07/5FaVI1LjzlOgpU7.png" alt="image-20210125142256031"></p>
<p>将上述安装包下载到本地后双击运行安装即可，安装地址自己设置一个就行，建议设置一个一级目录</p>
<h3 id="Linux-下安装"><a href="#Linux-下安装" class="headerlink" title="Linux 下安装"></a>Linux 下安装</h3><p>如果不是Linux平台敲代码就不需要再Linux安装Go，Go代码可以跨平台编译（详见文章末尾）</p>
<p>在版本选择界面选择下载Go文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://golang.google.cn/dl/go1.15.7.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure>
<p>解压到<code>/usr/local</code>目录下即可：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo tar -zxvf go1.15.7.linux-amd64.tar.gz -C /usr/local  # 解压</span><br></pre></td></tr></table></figure>
<h2 id="环境变量：GOROOT和GOPATH"><a href="#环境变量：GOROOT和GOPATH" class="headerlink" title="环境变量：GOROOT和GOPATH"></a>环境变量：GOROOT和GOPATH</h2><p>GOROOT：Go得安装路径</p>
<p>GOPATH：Go的工作目录路径，保存Go项目代码和第三方依赖（就是自己建个文件用来专门写Go代码的）</p>
<p>工作目录中建立<code>bin</code>、<code>pkg</code>、<code>src</code>三个目录</p>
<h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><p>Go 1.8版本开始，Go会设置一个默认目录，可以根据自己需要在用户变量或系统变量增删</p>
<img src="https://i.loli.net/2021/02/07/P8ujqN3gSxlawGU.png" alt="image-20210125164641082" style="zoom:80%;">

<p>最后将go安装目录的bin目录和go工作目录的bin目录加入<code>Path</code>变量就可以了，根据自己需要加入系统变量或用户变量</p>
<img src="https://i.loli.net/2021/02/07/OVjMdxSbEDWhgrs.png" alt="image-20210125164535792" style="zoom:80%;">

<p>在cmd中输入<code>go version</code>后出现go的信息表示成功</p>
<h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>Liunx有两个文件可以配置变量，其中<code>/etc/profile</code> 是系统变量文件；<code>~/.profile</code>是用户变量根据自己情况选择一个文件，添加如下两行代码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export GOROOT=/usr/local/go</span><br><span class="line">export PATH=$PATH:$GOROOT/bin</span><br></pre></td></tr></table></figure>
<p>修改系统变量需要重启生效，修改用户变量可以使用<code>source</code>命令加载文件生效</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source ~/.profile</span><br></pre></td></tr></table></figure>
<p>输入<code>go version</code>出现go信息表示成功</p>
<h3 id="GOPROXY和GO111MODULE"><a href="#GOPROXY和GO111MODULE" class="headerlink" title="GOPROXY和GO111MODULE"></a>GOPROXY和GO111MODULE</h3><p>默认GOPROXY配置是：<code>GOPROXY=https://proxy.golang.org,direct</code>国内访问不到，需要修改</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">go env # 查看go环境信息</span><br><span class="line">go env -w GOPROXY=https://goproxy.cn,direct # 设置go镜像</span><br><span class="line">go env -w GO111MODULE=on # 设置gomod</span><br></pre></td></tr></table></figure>
<h2 id="编辑器VS-Code"><a href="#编辑器VS-Code" class="headerlink" title="编辑器VS Code"></a>编辑器VS Code</h2><p>官网根据自己电脑平台下载相应安装包安装：<a href="https://code.visualstudio.com/Download">https://code.visualstudio.com/Download</a></p>
<p>左侧菜单栏介绍：</p>
<p><img src="https://i.loli.net/2021/02/07/uEzcdrfk4aXVM6U.png" alt="image-20210125161544227"></p>
<p>在扩展里面输入<code>chinese</code>，选择第一个安装中文简体插件</p>
<p><img src="https://i.loli.net/2021/02/07/t7eSxIHUAX1hP2C.png" alt="image-20210125161921818"></p>
<p>输入Go安装Go插件，让vs支持Go开发</p>
<p><img src="https://i.loli.net/2021/02/07/UDJQF9ZPTjKgRCS.png" alt="image-20210125162041573"></p>
<p>中文插件和Go插件重启vs后生效</p>
<p>安装Go开发插件，在vs按<code>Shift+Ctrl+p</code>输入<code>go:install/update tools</code>点击确定，选择全选，点击确定</p>
<p><img src="https://i.loli.net/2021/02/07/KPvt6VwCoO3M29g.png" alt="image-20210125162530646"></p>
<p>等待安装完成就可以了</p>
<h3 id="windows下切换cmd为默认终端"><a href="#windows下切换cmd为默认终端" class="headerlink" title="windows下切换cmd为默认终端"></a>windows下切换cmd为默认终端</h3><p>打开vs终端后显示如红框内，则点击下拉框，选择默认shell，然后选择cmd，重启终端；</p>
<p><img src="https://i.loli.net/2021/02/07/o9bGmxIRrkDaQS2.png" alt="image-20210125163548882"></p>
<p><img src="https://i.loli.net/2021/02/07/1Q6JZGjTysdBIqE.png" alt="image-20210125163639207"></p>
<p><img src="https://i.loli.net/2021/02/07/bG1wLfi82AMk4In.png" alt="image-20210125163702150"></p>
<p>终端没有下拉框的话可以按下<code>Shift+Ctrl+P</code>输入<code>shell</code>选择默认shell也可以</p>
<p><img src="https://i.loli.net/2021/02/07/GjyXUE9S1BnL6hr.png" alt="image-20210125164015495"></p>
<h2 id="第一个Go程序"><a href="#第一个Go程序" class="headerlink" title="第一个Go程序"></a>第一个Go程序</h2><p>在<code>src</code>目录下新建一个<code>hello</code>文件夹，里面新建<code>mian.go</code>文件，文件中输入：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>终端输入：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果在hello目录下执行：</span></span><br><span class="line"><span class="keyword">go</span> build</span><br><span class="line"><span class="comment">// 或者在其他目录执行以下命令：</span></span><br><span class="line"><span class="keyword">go</span> build hello</span><br></pre></td></tr></table></figure>
<p>编译后会生成<code>hello.exe</code>文件，终端执行改文件</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">G:\goproject\src\lianxi\hello&gt;hello.exe</span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure>
<p>可以用<code>-o</code>指定编译后的的文件名字：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认与项目同名，可用-o参数修改</span></span><br><span class="line"><span class="keyword">go</span> build -o heiheihei.exe</span><br></pre></td></tr></table></figure>
<h2 id="跨平台编译"><a href="#跨平台编译" class="headerlink" title="跨平台编译"></a>跨平台编译</h2><p>默认我们<code>go build</code>的可执行文件都是当前操作系统可执行的文件，如果我想在windows下编译一个linux下可执行文件，那需要怎么做呢？</p>
<p>只需要指定目标操作系统的平台和处理器架构即可：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">SET CGO_ENABLED=0  // 禁用CGO</span><br><span class="line">SET GOOS=linux  // 目标平台是linux</span><br><span class="line">SET GOARCH=amd64  // 目标处理器架构是amd64</span><br></pre></td></tr></table></figure>
<p><em>使用了cgo的代码是不支持跨平台编译的</em></p>
<p>然后再执行<code>go build</code>命令，得到的就是能够在Linux平台运行的可执行文件了。</p>
<p>Mac 下编译 Linux 和 Windows平台 64位 可执行程序：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build</span><br><span class="line">CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build</span><br></pre></td></tr></table></figure>
<p>Linux 下编译 Mac 和 Windows 平台64位可执行程序：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build</span><br><span class="line">CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build</span><br></pre></td></tr></table></figure>
<p>Windows下编译Mac平台64位可执行程序：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">SET CGO_ENABLED=0</span><br><span class="line">SET GOOS=darwin</span><br><span class="line">SET GOARCH=amd64</span><br><span class="line">go build</span><br></pre></td></tr></table></figure>
<p>现在，开启你的Go语言学习之旅吧。人生苦短，let’s Go.</p>
<h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><p>最后感谢这些文章的帮助：</p>
<blockquote>
<p><a href="https://www.liwenzhou.com/posts/Go/install_go_dev/">从零开始搭建Go语言开发环境</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>环境</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo搭建博客</title>
    <url>/2021/01/17/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为发现学习一些东西笔记东一点西一点，所以就想放在一个固定的地方，方便一点，找了一些资料，发现 github pages 和 hexo 可以免费搭建博客了（重点是免费），所以就试着搭建了一个，过程和一些坑都记录下。</p>
<h2 id="Github-Pages"><a href="#Github-Pages" class="headerlink" title="Github Pages"></a>Github Pages</h2><p> GitHub Pages 是一个静态页面搭建托管服务，开搭。如果没有github账号去 <a href="https://github.com/">注册</a> 一个，注册了的</p>
<p>就点击右上角的+号选择 New repository 来建立仓库。在（仓库名）repository name中必须填（重点）：username.github.io 必须是你的github账号名字+github+io。这是固定的格式，Description 是对仓库的说明可以写：xxx的博客，个人博客之类的。仓库选择公开，不公开不能使用github的pages功能，我已经踩过坑了。差不多就是下面这样：</p>
<img src="https://i.loli.net/2021/02/07/rZUIma4Pji6bxGz.png" alt="image-20210117033559349" style="zoom:50%;">

<p>然后来自己电脑上，我的电脑是win 10 的</p>
<p>首先电脑上先安装Git，这是一个在GitHub上拉取资源和上传资源的工具，没有的可以自己在 <a href="https://git-scm.com/downloads">下载</a> 安装下，如果想了解安装的细节的话可以看看廖雪峰老师的 <a href="https://www.liaoxuefeng.com/wiki/896043488029600/896067074338496">Git安装教程</a></p>
<img src="https://i.loli.net/2021/02/07/K7tqHxAV94e8iQF.png" alt="image-20210117033808505" style="zoom:50%;">

<p>鼠标右键打开Git Bash Here ，或者在菜单栏搜索Git Bash打开也可以，设置user.name和user.email配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;你的GitHub用户名&quot;</span><br><span class="line">git config --global user.email &quot;你的GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure>
<p>生成ssh密钥连接本地和GitHub：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure>
<p>然后打开在 C:\Users\Administrator.ssh 文件夹中的 id_rsa.pub，复制全部内容，登录GitHub，点击右上角人物头像点击settings设置界面，</p>
<img src="https://i.loli.net/2021/02/07/MAmvdqBiGepOZPj.png" alt="image-20210117033957541.png" style="zoom:40%;">

<p>然后选择SSH这个，再点击New SSH key加上密钥，写上这个密钥的说明，例如：家里的笔记本，台式电脑等，不然密钥多了你会不知道哪个是哪个，复制的内容贴在下面框里就好了，然后点击Add SSH key就好了。</p>
<img src="https://i.loli.net/2021/02/07/6OWHEg9N57Kiv4k.png" alt="image-20210117034216610" style="zoom:50%;">

<p>在Git Bash中检查是否设置密钥成功, 输入<code>ssh git@github.com </code>，如下图就说明成功了。</p>
<p><img src="https://i.loli.net/2021/02/07/Ohvxuk8ZpGJqSU9.png" alt="image-20210117034437859"></p>
<h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>hexo基于node，<a href="https://nodejs.org/en/download/">下载安装</a> node安装包，node包含npm，默认安装好后检查是否安装成功，在Git Bash输入（记得关掉重启下Bash，不然不生效）：node -v ，npm -v</p>
<p><img src="https://i.loli.net/2021/02/07/WTNMtkHZFpl4SOJ.png" alt="image-20210117034630578"></p>
<p>到这里安装hexo的环境都搭建好了</p>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>​        在电脑里面创建一个一个文件夹，可以命名为Blog之类的，我们的Hexo项目都放这个文件里面。进入文件夹，右键打开Git Bash，这样我们启动Bash后就直接在Blog文件下了</p>
<img src="https://i.loli.net/2021/02/07/CWUg7wObeqkanT3.png" alt="20210117221924" style="zoom:50%;">

<p>打开后是这样的：</p>
<img src="https://i.loli.net/2021/02/07/sp8hx3gXJuI4m2t.png" alt="20210117020241448" style="zoom:50%;">

<p>用npm安装hexo, </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli # 注意在Blog文件夹中输入，安装后输入hexo -v报错：Cannot find module &#x27;hexo&#x27; from &#x27;&#x27;的话使用下面这条命令</span><br><span class="line">npm install hexo-util --save # 上面安装没报错的话不用这条命令</span><br></pre></td></tr></table></figure>
<p>注意：我这里报错提示：系统禁止运行脚本，如果你没有的话跳过这步</p>
<img src="https://i.loli.net/2021/02/07/hKuEgZAHzvS3QVq.png" alt="image-20210118180357726" style="zoom:40%;">

<p>然后点击左边的开发者选择，右边下滑找到PowerShell，勾选允许本地运行PowerShell脚本，点击应用，然后把输入界面重新打开一下，让设置生效就行了</p>
<img src="https://i.loli.net/2021/02/07/XCnHIeOpKA3mjtb.png" alt="image-20210118180450626" style="zoom:40%;">



<p>好了后就可以初始化我们的博客了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo init # 注意在Blog文件夹中输入</span><br></pre></td></tr></table></figure>
<p>好了以后就可以启动hexo服务了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g #生产静态页面，默认是4000端口，如果被占可以指定，如：hexo server -p 5000</span><br><span class="line">hexo s #本地启动hexo服务</span><br></pre></td></tr></table></figure>
<p>然后在网址上输入localhost:4000（端口号如果改了的话这里也要改）就可以看到了自己的博客了，到这里博客在本地就搭建好了，但是只能现在这台电脑看的到，所以要用GitHub托管，让其他电脑也看的到</p>
<h2 id="Github-管理博客"><a href="#Github-管理博客" class="headerlink" title="Github 管理博客"></a>Github 管理博客</h2><h3 id="项目上传GitHub"><a href="#项目上传GitHub" class="headerlink" title="项目上传GitHub"></a>项目上传GitHub</h3><p>​        GitHub主线用来放博客项目，用来以后换电脑后可以拉取项目直接写博客，不用重新在本地一点一点搭建，服务托管在分支</p>
<p>打开Blog文件夹里面的_config.yml文件。翻到最后</p>
<ol>
<li>type后面填git</li>
<li>repo后面填仓库地址</li>
<li>branch后面填分支名字</li>
</ol>
<p><img src="https://i.loli.net/2021/02/07/S8QMeYUu3IXmTjg.png" alt="image-20210117021949987"></p>
<p>在Git Bash中下载git</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save # 注意在Blog文件夹中输入</span><br></pre></td></tr></table></figure>
<p>安装好就把准备好的项目上传GitHub主线</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone &#x27;GitHub项目地址&#x27; # 复制GitHub项目到本地，本地会有个与GitHub项目名文件</span><br></pre></td></tr></table></figure>
<img src="https://i.loli.net/2021/02/07/ce4AXr6ShBjzURY.png" alt="image-20210118181529871" style="zoom:80%;">

<p>然后把搭建的博客项目上传到GitHub上去</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add * # 新增文件放入提交缓存中</span><br><span class="line">git commit  -m  &quot;提交说明&quot; # 就是对这次提交的说明</span><br><span class="line">git push -u origin main # 本地项目提交到GitHub主线上，GitHub上会少几个文件，不过不要紧</span><br></pre></td></tr></table></figure>
<p>好了之后GitHub上面就有项目了，以后换电脑就拉取项目直接写博客就行了</p>
<h3 id="GitHub托管博客"><a href="#GitHub托管博客" class="headerlink" title="GitHub托管博客"></a>GitHub托管博客</h3><p>博客部署到GitHub上了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 这是hexo g,hexo d的简写，</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> hexo d 项目部署到GitHub，</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 文件修改后要先生成文件，再部署，也就是要先hexo g，后hexo d</span></span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>
<p>推送完在去GitHub项目中设置Pages功能，先登录GitHub，进去博客项目，点击右边的Settings</p>
<img src="https://i.loli.net/2021/02/07/vfHaS6hdEtlUMzc.png" alt="image-20210118172021785" style="zoom:50%;">

<p>下滑找到GitHub Pages，把branch设置成我们在_config.yml上写的分支名字。</p>
<img src="https://i.loli.net/2021/02/07/kHDugOBtViEz4xM.png" alt="image-20210118172312679" style="zoom:50%;">

<p>好了，打开你的 username.github.io 看看吧</p>
<h4 id="hexo命令："><a href="#hexo命令：" class="headerlink" title="hexo命令："></a>hexo命令：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo n &quot;博客&quot;			# 新建博客文章，在Blog\source\_posts文件夹中</span><br><span class="line">hexo g 				 # 生成静态页面</span><br><span class="line">hexo s 			 	 # 本地启动hexo服务</span><br><span class="line">hexo d 				 # 推送到GitHub</span><br><span class="line"></span><br><span class="line">hexo server -p 5000  # 指定端口</span><br><span class="line">hexo clean 			 # 清理缓存，若是网页正常情况下可以忽略这条命令</span><br></pre></td></tr></table></figure>
<h4 id="博客网址标题等修改"><a href="#博客网址标题等修改" class="headerlink" title="博客网址标题等修改"></a><a href="https://hexo.io/zh-cn/docs/configuration">博客网址标题等修改</a></h4><h4 id="博客添加图片"><a href="#博客添加图片" class="headerlink" title="博客添加图片"></a>博客添加图片</h4><h5 id="使用图片插件"><a href="#使用图片插件" class="headerlink" title="使用图片插件"></a>使用图片插件</h5><p>先去项目中_config.yml文件中把post_asset_folder这个选择设为true</p>
<p><img src="https://i.loli.net/2021/02/07/7bgI3kDfFXp19EV.png" alt="image-20210120163629843"></p>
<p>然后在blog文件夹中下载插件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>
<p>安装好了以后，在用 hexo n “xxx” 新建博客时，在/source/_posts文件中除了会有 xxx.md的博客文件还会有一个与博客同名文件夹，博客图片保存在同名文件夹内，使用时在xxxx.md中按照markdown的格式引入图片</p>
<ul>
<li><strong>编辑器写博客</strong></li>
</ul>
<p>在需要图片的地方使用下面这两种方法都行，下面那个就是可以缩小图片，style里面那个就是说图片缩小50%后再显示。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">描述</span>](<span class="link">xxx/图片名字.png</span>)</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;xxx/图片名字.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片无法显示时的替代信息&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:50%;&quot;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>用Typora写博客</strong></li>
</ul>
<p>Typora有保存图片位置的设置，我们把图片保存地址设置为同位置的同名文件夹就行了</p>
<p>点击左上角文件，下拉选项选偏好设置</p>
<img src="https://i.loli.net/2021/02/07/GR1YQr3BeXA8xnc.png" alt="image-20210120165604892" style="zoom: 80%;">

<p>左边点击图像，然后在插入图片地址处点击下拉，选择复制到指定路径</p>
<p><img src="https://i.loli.net/2021/02/07/U8uI5d24oEb9mei.png" alt="image-20210120165805721"></p>
<p>在下面输入框中输入：./${filename} 你截图粘贴的时候就会把图片直接保存在博客同位置的同名文件夹中了，下面这些图片设置选项前三个最好勾上，其他看需求是否需要。</p>
<p><img src="https://i.loli.net/2021/02/07/euvxgd26LoCTJaO.png" alt="image-20210120165928154"></p>
<p>好了，现在博客部署到GitHub上就会显示图片了。</p>
<h3 id="更换博客主题"><a href="#更换博客主题" class="headerlink" title="更换博客主题"></a>更换博客主题</h3><p>将自己喜欢的主题下载到themes文件夹中，这里就是放主题的，我选的是<a href="https://github.com/theme-next/hexo-theme-next">next主题</a>，你也可以选其他喜欢的主题</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<p>修改_config.yml配置，把theme字段配置为新下载的主题：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>
<p>本地查看下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 清理缓存</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 生成静态页面</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 本地启动hexo服务</span></span><br><span class="line">hexo clean</span><br><span class="line">hexo g </span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p>我看到<a href="https://github.com/jerryc127/hexo-theme-butterfly">butterfly主题</a>的时候又感觉这个好看，换了这个，主题设置可以参考 <a href="https://xiabor.com/">MuJin’s Blog</a> 大佬的博客</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载主题</span></span><br><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装主题依赖</span></span><br><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure>
<p>图床的话可以选择 <a href="https://sm.ms/">sm.ms</a>、<a href="https://imgchr.com/">路过床床</a>，还可以自己用<a href="https://blog.keepdai.cn/jsdelivr.html">github建立一个图床</a>都行，看自己选择吧</p>
<h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><blockquote>
<p>最后感觉这些文章的帮助：</p>
<p><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029">hexo史上最全搭建教程</a></p>
</blockquote>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu安装mysql</title>
    <url>/2021/01/18/Ubuntu%E5%AE%89%E8%A3%85mysql/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><a href="https://yq.aliyun.com/go/articleRenderRedirect?url=https://www.mysql.com/">MySQL</a>是最流行的开源关系数据库管理系统。它速度快，容易使用，容易扩展，并且流行的<code>LAMP</code>和<code>LEMP</code>的一部分。安装电脑为Ubuntu 20.04</p>
<h3 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h3><h4 id="Ubuntu-版本"><a href="#Ubuntu-版本" class="headerlink" title="Ubuntu 版本"></a>Ubuntu 版本</h4><p>安装东西前看下Ubuntu版本，毕竟有些东西要看看版本能不能兼容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo lsb_release -a</span><br></pre></td></tr></table></figure>
<h4 id="安装MySQL-1"><a href="#安装MySQL-1" class="headerlink" title="安装MySQL"></a>安装MySQL</h4><p>开始安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update # 更新源</span><br><span class="line">sudo apt install mysql-server # 安装mysql-server</span><br></pre></td></tr></table></figure>
<p>检查是否安装成功：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo service mysql start</span><br></pre></td></tr></table></figure>
<p>我这里报错了，如下，你没有报错的话可以跳过这里：</p>
<p><img src="https://i.loli.net/2021/02/07/LKelHRgqnmI2OAP.png" alt="image-20210119175539464"></p>
<p>提示我没有一个文件，最后用了<a href="https://www.cnblogs.com/cnwcl/p/13805643.html">汪成龙老师</a>，解决方法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo service mysql stop # 关闭mysql服务</span><br><span class="line">sudo usermod -d /var/lib/mysql/ mysql</span><br><span class="line">sudo service mysql start # 启动mysql服务，大部分报错可以重启mysql服务解决</span><br></pre></td></tr></table></figure>
<h4 id="MySQL配置"><a href="#MySQL配置" class="headerlink" title="MySQL配置"></a>MySQL配置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mysql_secure_installation</span><br></pre></td></tr></table></figure>
<p>按提示设置root密码，密码等级……</p>
<p>好了后以root用户登录mysql</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mysql</span><br></pre></td></tr></table></figure>
<p>创建新用户：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 创建新用户：my_user */</span></span><br><span class="line"><span class="comment">/* host：%表示任意连接，localhost表示只允许本地连接 */</span></span><br><span class="line"><span class="comment">/* 密码：my_passwrod */</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;my_user&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;my_password&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 查询用户 */</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">user</span>,host <span class="keyword">FROM</span> mysql.user;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 删除用户，默认删除的是&#x27;xxx&#x27;@&#x27;%&#x27;用户，如果要删除&#x27;xxx&#x27;@&#x27;localhost&#x27;，使用drop user &#x27;xxx&#x27;@&#x27;localhost&#x27; */</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> my_user;</span><br></pre></td></tr></table></figure>
<h4 id="允许远程连接MySQL"><a href="#允许远程连接MySQL" class="headerlink" title="允许远程连接MySQL"></a>允许远程连接MySQL</h4><p>修改mysql配置文件：/etc/mysql/mysql.conf.d/mysqld.cnf (老版的话在：/etc/mysql/my.cnf)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure>
<p>找到bind-address = 127.0.0.1 将其注释后保存退出，然后重启下MySQL服务，让配置生效就行了</p>
<p><img src="https://i.loli.net/2021/02/07/U4xOAKBegaRZ9jb.png" alt="image-20210120155503110"></p>
<p>然后可以用MySQL客户端（这个不要求我用的是免费的heidiSQL，用别的也一样）用刚刚创建的账号，连接试试看：</p>
<p><img src="https://i.loli.net/2021/02/07/wlT6m1thROFLZbH.png" alt="image-20210120160018545"></p>
<p>连接上了就好了</p>
<h4 id="常用命令："><a href="#常用命令：" class="headerlink" title="常用命令："></a>常用命令：</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 创建、查看、删除账号 */</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;user&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">user</span>,host <span class="keyword">FROM</span> mysql.user;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 刷新权限 */</span></span><br><span class="line">flush privileges;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 查看、修改账号是否远程登录,host字段，localhost为本地登录，%为远程登录有ip需要的话，可以把%换成ip */</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">user</span>,host <span class="keyword">FROM</span> mysql.user;</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> host <span class="operator">=</span> <span class="string">&#x27;%&#x27;</span> <span class="keyword">where</span> <span class="keyword">user</span> <span class="operator">=</span> <span class="string">&#x27;root&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 查看、修改密码强度等级，根据policy字段来改，有些是.policy,有些是_policy，length为密码长度 */</span>;</span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;validate_password%&#x27;</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password_policy<span class="operator">=</span>LOW;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password_length<span class="operator">=</span><span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 修改账号密码，mysql8.0后修改密码不能使用password字段了 */</span></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> authentication_string<span class="operator">=</span><span class="string">&#x27;&#x27;</span> <span class="keyword">where</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;root&#x27;</span>;      <span class="comment">--将字段置为空</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">with</span> mysql_native_password <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="卸载MySQL"><a href="#卸载MySQL" class="headerlink" title="卸载MySQL"></a>卸载MySQL</h3><p>查看安装的mysql：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dpkg --list|grep mysql</span><br></pre></td></tr></table></figure>
<p>删除mysql：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get remove mysql-*</span><br></pre></td></tr></table></figure>
<p>清理残留数据：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dpkg -l |grep ^rc|awk &#x27;&#123;print $2&#125;&#x27; |sudo xargs dpkg -P</span><br></pre></td></tr></table></figure>
<h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><p>感谢以下文章的帮助：</p>
<blockquote>
<p><a href="https://blog.csdn.net/weixin_38924500/article/details/106261971">Ubuntu20.04安装Mysql</a></p>
<p><a href="https://www.jianshu.com/p/7b6b8a5689f0">ubuntu彻底卸载mysql并且重新安装</a></p>
<p><a href="https://blog.csdn.net/qq_26164609/article/details/106881079">Ubunto20.04安装MySQL并修改root用户密码</a></p>
</blockquote>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言fmt包使用</title>
    <url>/2021/02/18/Go%E8%AF%AD%E8%A8%80fmt%E5%8C%85%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>fmt标准库是Go语言学习中接触最频繁的一个，介绍一些fmt包的常用函数</p>
<h3 id="fmt"><a href="#fmt" class="headerlink" title="fmt"></a>fmt</h3><p>fmt包实现了 <code>Printf</code> 和 <code>scan</code> 的格式化I/O。主要分为向外输出内容和获取出入内容两部分。</p>
<p>向外输出</p>
<hr>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>标准库</tag>
      </tags>
  </entry>
</search>
